generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   @db.VarChar(64)
  role      String   @default("Operator")
  position  String?  
  firstName String?
  lastName  String?
  bio       String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventoryCreated Inventory[] @relation("CreatedUser")
  inventoryUpdated Inventory[] @relation("UpdatedUser")
  logs             Log[]
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  productLots ProductLot[]
}

model ProductLot {
  id                Int    @id @default(autoincrement())
  lotNumber         String @unique
  internalReference String @unique
  productName       String
  quantity          Int    @default(0)

  product          Product     @relation(fields: [productName], references: [name])
  inventoryRecords Inventory[]
  activityLogs     Log[]
}

model Warehouse {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  inventoryBays InventoryBay[]
}

model InventoryBay {
  id            Int    @id @default(autoincrement())
  name          String @unique
  warehouseName String
  maxUniqueLots Int    @default(1)

  warehouse        Warehouse   @relation(fields: [warehouseName], references: [name])
  inventoryRecords Inventory[]
  activityLogsFrom Log[]       @relation("FromLocation")
  activityLogsTo   Log[]       @relation("ToLocation")
}

model Inventory {
  id        Int      @id @default(autoincrement())
  lotNumber String
  location  String
  quantity  Int
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String

  createdUser  User         @relation("CreatedUser", fields: [createdBy], references: [email])
  updatedUser  User         @relation("UpdatedUser", fields: [updatedBy], references: [email])
  productLot   ProductLot   @relation(fields: [lotNumber], references: [lotNumber])
  inventoryBay InventoryBay @relation(fields: [location], references: [name])
}

model Log {
  id            Int      @id @default(autoincrement())
  fromLocation  String
  toLocation    String
  dateTime      DateTime @default(now())
  user          String
  lotNumber     String
  quantityMoved Int
  comments      String   @default("")

  fromInventoryBay InventoryBay @relation("FromLocation", fields: [fromLocation], references: [name])
  toInventoryBay   InventoryBay @relation("ToLocation", fields: [toLocation], references: [name])
  logUser          User         @relation(fields: [user], references: [email])
  productLot       ProductLot   @relation(fields: [lotNumber], references: [lotNumber])
}
